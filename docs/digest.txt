Directory structure:
└── /./
    ├── __init__.py
    ├── src/
    │   ├── __pycache__/
    │   ├── database/
    │   │   ├── database.py
    │   │   ├── __init__.py
    │   │   ├── schema.py
    │   │   ├── __pycache__/
    │   │   └── link.py
    │   ├── settengs.py
    │   ├── main.py
    │   └── __init__.py
    ├── pyproject.toml
    ├── docs/
    │   └── digest.txt
    ├── .env.example
    ├── README.md
    ├── app.db
    ├── .python-version
    ├── uv.lock
    └── LICENSE

================================================
File: /src/database/database.py
================================================
from sqlite3 import connect, Row
from rich import print

from settengs import DATABASE_NAME


class Database:
    def __init__(self, db_name: str = DATABASE_NAME):
        self.db_name = db_name
        self.connection = None
        self.cursor = None
        print("Database initialized.")

    def connect(self):
        """Connect to SQLite database."""
        self.connection = connect(self.db_name)
        self.connection.row_factory = Row
        self.cursor = self.connection.cursor()
        print("Connected to the database.")

    def close(self):
        """Close the database connection."""
        if self.connection:
            self.connection.close()
            print("Database connection closed.")
        else:
            print("No database connection to close.")


================================================
File: /src/database/__init__.py
================================================
from .database import Database
from .schema import User, Link
from .link import LinkDatabase

__all__ = ["Database", "User", "Link", "LinkDatabase"]


================================================
File: /src/database/schema.py
================================================
from pydantic import BaseModel, Field, EmailStr, HttpUrl
from typing import Optional
from datetime import datetime


class User(BaseModel):
    """A User model representing a user in the system.

    This model inherits from BaseModel and defines the basic user attributes
    including an optional ID, required name, and email address.

    Attributes:
        id (Optional[int]): The unique identifier for the user. Auto-generated when None.
        name (str): The user's name. Must be at least 4 characters long.
        email (EmailStr): The user's email address in valid email format.

    Example:
        user = User(
            name="John Doe",
            email="john.doe@example.com"
        )
    """

    id: Optional[int] = Field(None, description="User ID (autogenerated)")
    name: str = Field(..., min_length=4, description="Name of the user")
    email: EmailStr = Field(..., description="Email of the user")


class Link(BaseModel):
    """A Pydantic model representing a Link entity in the system.

    This model defines the structure and validation rules for link objects, including
    their URL, associated metadata, and relationships.

    Attributes:
        id (Optional[int]): Unique identifier for the link.
        url (HttpUrl): The complete URL of the link.
        domain (str): The domain name extracted from the URL.
        description (Optional[str]): Optional text description of the link's content.
        tag (list): List of tags associated with the link for categorization.
        author_id (int): ID reference to the user who created the link.
        is_read (bool): Flag indicating whether the link has been read, defaults to False.
        created_at (str): ISO format timestamp of when the link was created.
        updated_at (str): ISO format timestamp of the link's last modification.
    """

    id: Optional[int] = Field(None, description="Unique identifier for the link")
    url: HttpUrl = Field(..., description="The URL of the link")
    domain: str = Field(..., description="Domain of the URL")
    description: Optional[str] = Field(None, description="Description of the link")
    tag: list = Field(default_factory=list, description="Tags associated with the link")
    author_id: int = Field(..., description="Foreign key to the User model")
    is_read: bool = Field(default=False, description="Whether the link has been read")
    created_at: str = Field(default_factory=lambda: datetime.utcnow().isoformat(), description="Creation timestamp")
    updated_at: str = Field(default_factory=lambda: datetime.utcnow().isoformat(), description="Last update timestamp")


================================================
File: /src/database/link.py
================================================
from sqlite3 import IntegrityError
from json import dumps, loads
from typing import List, Optional
from datetime import datetime
from rich import print

from .database import Database
from .schema import User, Link


class LinkDatabase(Database):
    def create_table(self):
        """Create users and links tables."""
        # Create the users table
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                email TEXT NOT NULL UNIQUE
            )
        """)

        # Create the links table with a foreign key to users
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS links (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                url TEXT NOT NULL UNIQUE,
                domain TEXT NOT NULL,
                description TEXT,
                tag TEXT,
                author_id INTEGER NOT NULL,
                is_read INTEGER DEFAULT 0, -- New column added
                created_at TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY (author_id) REFERENCES users (id)
            )
        """)
        self.connection.commit()

    def create_user(self, user: User):
        """Insert a new user."""
        try:
            self.cursor.execute(
                """
                INSERT INTO users (name, email)
                VALUES (?, ?)
            """,
                (user.name, user.email),
            )
            self.connection.commit()
            print("User created successfully.")
        except IntegrityError:
            print(f"User with email {user.email} already exists. Skipping insertion.")

    def create_link(self, link: Link):
        """Insert a new link."""
        try:
            self.cursor.execute(
                """
                INSERT INTO links (url, domain, description, tag, author_id, is_read, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """,
                (
                    str(link.url),
                    link.domain,
                    link.description,
                    dumps(link.tag),
                    link.author_id,
                    int(link.is_read),
                    link.created_at,
                    link.updated_at,
                ),
            )
            self.connection.commit()
            print("Link created successfully.")
        except IntegrityError:
            print(f"User with email {str(link.url)} already exists. Skipping insertion.")

    def read_users(self) -> List[User]:
        """Retrieve all users."""
        self.cursor.execute("SELECT * FROM users")
        rows = self.cursor.fetchall()
        return [User(**dict(row)) for row in rows]

    def read_links_with_authors(self) -> List[dict]:
        """Retrieve all links with their authors."""
        self.cursor.execute("""
            SELECT links.*, users.name as author_name, users.email as author_email
            FROM links
            JOIN users ON links.author_id = users.id
        """)
        rows = self.cursor.fetchall()

        results = []
        for row in rows:
            row_dict = dict(row)
            # Extract link fields explicitly
            link_data = {key: row_dict[key] for key in Link.__fields__.keys()}
            link_data["tag"] = loads(link_data["tag"])  # Convert JSON string to list
            link = Link(**link_data)

            # Extract author information
            author = {
                "name": row_dict["author_name"],
                "email": row_dict["author_email"],
            }

            results.append({"link": link, "author": author})

        return results

    def read_link(self, link_id: int) -> Optional[Link]:
        """Retrieve a specific link by ID."""
        self.cursor.execute("SELECT * FROM links WHERE id = ?", (link_id,))
        row = self.cursor.fetchone()
        if row:
            return Link(**dict(row), tag=loads(row["tag"]))
        return None

    def update_link(self, link_id: int, updated_link: Link):
        """Update a link by ID."""
        updated_link.updated_at = datetime.utcnow().isoformat()
        self.cursor.execute(
            """
            UPDATE links
            SET url = ?, domain = ?, description = ?, tag = ?, updated_at = ?
            WHERE id = ?
        """,
            (
                updated_link.url,
                updated_link.domain,
                updated_link.description,
                dumps(updated_link.tag),
                updated_link.updated_at,
                link_id,
            ),
        )
        self.connection.commit()
        print("Link updated successfully.")

    def delete_link(self, link_id: int):
        """Delete a link by ID."""
        self.cursor.execute("DELETE FROM links WHERE id = ?", (link_id,))
        self.connection.commit()
        print("Link deleted successfully.")


================================================
File: /src/settengs.py
================================================
DATABASE_NAME = "app.db"


================================================
File: /src/main.py
================================================
from rich import print

from database import LinkDatabase, User, Link


# Main Script for Demonstration
if __name__ == "__main__":
    db = LinkDatabase()
    db.connect()
    db.create_table()

    # Create a user
    user = User(name="Alice", email="alice@example.com")
    db.create_user(user)

    # Retrieve the user ID (assuming it's the first user)
    user_id = 1

    # Create a link with an author
    new_link = Link(
        url="https://example.com",
        domain="example.com",
        description="An example website",
        tag=["example", "test"],
        author_id=user_id,
    )
    db.create_link(new_link)

    # Retrieve all links with authors
    print("\nLinks with authors:")
    links_with_authors = db.read_links_with_authors()
    for entry in links_with_authors:
        print(f"Link: {entry['link']}, Author: {entry['author']}")

    # Close the database connection
    db.close()


================================================
File: /pyproject.toml
================================================
[project]
name = "linkcovery"
version = "0.1.0"
description = "Link discovery tool for people whit love and python :)"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "pydantic[email]>=2.10.5",
    "rich>=13.9.4",
]

[dependency-groups]
dev = [
    "gitingest>=0.1.2",
    "ruff>=0.9.0",
]

[tool.ruff]
line-length = 120


================================================
File: /.python-version
================================================
3.13


================================================
File: /LICENSE
================================================
MIT License

Copyright (c) 2025 Arian Omrani

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
